[
  {
    "class":"firrtl.EmitCircuitAnnotation",
    "emitter":"firrtl.VerilogEmitter"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"I2S_Transmitter.clk_wiz_0_clk_wiz",
    "name":"clk_wiz_0_clk_wiz.v",
    "text":"\n// file: clk_wiz_0.v\n// \n// (c) Copyright 2008 - 2013 Xilinx, Inc. All rights reserved.\n// \n// This file contains confidential and proprietary information\n// of Xilinx, Inc. and is protected under U.S. and\n// international copyright and other intellectual property\n// laws.\n// \n// DISCLAIMER\n// This disclaimer is not a license and does not grant any\n// rights to the materials distributed herewith. Except as\n// otherwise provided in a valid license issued to you by\n// Xilinx, and to the maximum extent permitted by applicable\n// law: (1) THESE MATERIALS ARE MADE AVAILABLE \"AS IS\" AND\n// WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES\n// AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING\n// BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-\n// INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and\n// (2) Xilinx shall not be liable (whether in contract or tort,\n// including negligence, or under any other theory of\n// liability) for any loss or damage of any kind or nature\n// related to, arising under or in connection with these\n// materials, including for any direct, or any indirect,\n// special, incidental, or consequential loss or damage\n// (including loss of data, profits, goodwill, or any type of\n// loss or damage suffered as a result of any action brought\n// by a third party) even if such damage or loss was\n// reasonably foreseeable or Xilinx had been advised of the\n// possibility of the same.\n// \n// CRITICAL APPLICATIONS\n// Xilinx products are not designed or intended to be fail-\n// safe, or for use in any application requiring fail-safe\n// performance, such as life-support or safety devices or\n// systems, Class III medical devices, nuclear facilities,\n// applications related to the deployment of airbags, or any\n// other applications that could lead to death, personal\n// injury, or severe property or environmental damage\n// (individually and collectively, \"Critical\n// Applications\"). Customer assumes the sole risk and\n// liability of any use of Xilinx products in Critical\n// Applications, subject only to applicable laws and\n// regulations governing limitations on product liability.\n// \n// THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS\n// PART OF THIS FILE AT ALL TIMES.\n// \n//----------------------------------------------------------------------------\n// User entered comments\n//----------------------------------------------------------------------------\n// None\n//\n//----------------------------------------------------------------------------\n//  Output     Output      Phase    Duty Cycle   Pk-to-Pk     Phase\n//   Clock     Freq (MHz)  (degrees)    (%)     Jitter (ps)  Error (ps)\n//----------------------------------------------------------------------------\n// MCLK_48K__12.28814______0.000______50.0______167.185____134.075\n// MCLK_44K__11.32812______0.000______50.0______170.238____134.075\n//\n//----------------------------------------------------------------------------\n// Input Clock   Freq (MHz)    Input Jitter (UI)\n//----------------------------------------------------------------------------\n// __primary_________100.000____________0.010\n\n`timescale 1ps/1ps\n\nmodule clk_wiz_0_clk_wiz \n\n (// Clock in ports\n  // Clock out ports\n  output        MCLK_48K,\n  output        MCLK_44K,\n  // Status and control signals\n  output        locked,\n  input         clk_in1\n );\n  // Input buffering\n  //------------------------------------\nwire clk_in1_clk_wiz_0;\nwire clk_in2_clk_wiz_0;\n  IBUF clkin1_ibufg\n   (.O (clk_in1_clk_wiz_0),\n    .I (clk_in1));\n\n\n\n\n  // Clocking PRIMITIVE\n  //------------------------------------\n\n  // Instantiation of the MMCM PRIMITIVE\n  //    * Unused inputs are tied off\n  //    * Unused outputs are labeled unused\n\n  wire        MCLK_48K_clk_wiz_0;\n  wire        MCLK_44K_clk_wiz_0;\n  wire        clk_out3_clk_wiz_0;\n  wire        clk_out4_clk_wiz_0;\n  wire        clk_out5_clk_wiz_0;\n  wire        clk_out6_clk_wiz_0;\n  wire        clk_out7_clk_wiz_0;\n\n  wire [15:0] do_unused;\n  wire        drdy_unused;\n  wire        psdone_unused;\n  wire        locked_int;\n  wire        clkfbout_clk_wiz_0;\n  wire        clkfbout_buf_clk_wiz_0;\n  wire        clkfboutb_unused;\n   wire clkout2_unused;\n   wire clkout3_unused;\n   wire clkout4_unused;\n  wire        clkout5_unused;\n  wire        clkout6_unused;\n  wire        clkfbstopped_unused;\n  wire        clkinstopped_unused;\n  (* KEEP = \"TRUE\" *) \n  (* ASYNC_REG = \"TRUE\" *)\n  reg  [7 :0] seq_reg1 = 0;\n  (* KEEP = \"TRUE\" *) \n  (* ASYNC_REG = \"TRUE\" *)\n  reg  [7 :0] seq_reg2 = 0;\n\n  PLLE2_ADV\n  #(.BANDWIDTH            (\"OPTIMIZED\"),\n    .COMPENSATION         (\"ZHOLD\"),\n    .STARTUP_WAIT         (\"FALSE\"),\n    .DIVCLK_DIVIDE        (2),\n    .CLKFBOUT_MULT        (29),\n    .CLKFBOUT_PHASE       (0.000),\n    .CLKOUT0_DIVIDE       (118),\n    .CLKOUT0_PHASE        (0.000),\n    .CLKOUT0_DUTY_CYCLE   (0.500),\n    .CLKOUT1_DIVIDE       (128),\n    .CLKOUT1_PHASE        (0.000),\n    .CLKOUT1_DUTY_CYCLE   (0.500),\n    .CLKIN1_PERIOD        (10.000))\n  plle2_adv_inst\n    // Output clocks\n   (\n    .CLKFBOUT            (clkfbout_clk_wiz_0),\n    .CLKOUT0             (MCLK_48K_clk_wiz_0),\n    .CLKOUT1             (MCLK_44K_clk_wiz_0),\n    .CLKOUT2             (clkout2_unused),\n    .CLKOUT3             (clkout3_unused),\n    .CLKOUT4             (clkout4_unused),\n    .CLKOUT5             (clkout5_unused),\n     // Input clock control\n    .CLKFBIN             (clkfbout_buf_clk_wiz_0),\n    .CLKIN1              (clk_in1_clk_wiz_0),\n    .CLKIN2              (1'b0),\n     // Tied to always select the primary input clock\n    .CLKINSEL            (1'b1),\n    // Ports for dynamic reconfiguration\n    .DADDR               (7'h0),\n    .DCLK                (1'b0),\n    .DEN                 (1'b0),\n    .DI                  (16'h0),\n    .DO                  (do_unused),\n    .DRDY                (drdy_unused),\n    .DWE                 (1'b0),\n    // Other control and status signals\n    .LOCKED              (locked_int),\n    .PWRDWN              (1'b0),\n    .RST                 (1'b0));\n\n  assign locked = locked_int;\n// Clock Monitor clock assigning\n//--------------------------------------\n // Output buffering\n  //-----------------------------------\n\n  BUFG clkf_buf\n   (.O (clkfbout_buf_clk_wiz_0),\n    .I (clkfbout_clk_wiz_0));\n\n\n\n\n\n\n\n  BUFGCE clkout1_buf\n   (.O   (MCLK_48K),\n    .CE  (seq_reg1[7]),\n    .I   (MCLK_48K_clk_wiz_0));\n\n  BUFH clkout1_buf_en\n   (.O   (MCLK_48K_clk_wiz_0_en_clk),\n    .I   (MCLK_48K_clk_wiz_0));\n  always @(posedge MCLK_48K_clk_wiz_0_en_clk)\n        seq_reg1 <= {seq_reg1[6:0],locked_int};\n\n\n  BUFGCE clkout2_buf\n   (.O   (MCLK_44K),\n    .CE  (seq_reg2[7]),\n    .I   (MCLK_44K_clk_wiz_0));\n \n  BUFH clkout2_buf_en\n   (.O   (MCLK_44K_clk_wiz_0_en_clk),\n    .I   (MCLK_44K_clk_wiz_0));\n \n  always @(posedge MCLK_44K_clk_wiz_0_en_clk)\n        seq_reg2 <= {seq_reg2[6:0],locked_int};\n\n\n\n\n\nendmodule\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxTargetDirAnno",
    "targetDir":"."
  }
]