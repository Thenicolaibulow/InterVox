circuit interVox_Encoder :
  module bi_phase_encoder :
    input clock : Clock
    input reset : Reset
    output io : { DATA_OUT : UInt<1>, flip AUDIOINPUT : UInt<64>, flip DSPINPUT : UInt<64>, flip ENA : UInt<1>, NEXT : UInt<1>}

    reg outReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[intervox_transmitter.scala 38:32]
    reg next : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[intervox_transmitter.scala 39:32]
    reg stereoData : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[intervox_transmitter.scala 40:32]
    reg dspData : UInt<16>, clock with :
      reset => (reset, UInt<16>("h0")) @[intervox_transmitter.scala 41:32]
    reg dspData2 : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[intervox_transmitter.scala 42:32]
    reg bitCntr_enc : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[intervox_transmitter.scala 43:32]
    reg hasNone : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[intervox_transmitter.scala 44:32]
    reg holdState : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[intervox_transmitter.scala 45:32]
    reg dataIndex : UInt<6>, clock with :
      reset => (reset, UInt<6>("h0")) @[intervox_transmitter.scala 46:32]
    io.DATA_OUT <= outReg @[intervox_transmitter.scala 48:17]
    stereoData <= io.AUDIOINPUT @[intervox_transmitter.scala 50:17]
    dspData <= io.DSPINPUT @[intervox_transmitter.scala 51:17]
    dspData2 <= UInt<1>("h0") @[intervox_transmitter.scala 52:17]
    io.NEXT <= next @[intervox_transmitter.scala 53:17]
    reg ndexR : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[intervox_transmitter.scala 55:32]
    node _T = eq(io.ENA, UInt<1>("h1")) @[intervox_transmitter.scala 59:17]
    when _T : @[intervox_transmitter.scala 59:25]
      node _bitCntr_enc_T = add(bitCntr_enc, UInt<1>("h1")) @[intervox_transmitter.scala 61:36]
      node _bitCntr_enc_T_1 = tail(_bitCntr_enc_T, 1) @[intervox_transmitter.scala 61:36]
      bitCntr_enc <= _bitCntr_enc_T_1 @[intervox_transmitter.scala 61:21]
      node _ndexR_T = not(ndexR) @[intervox_transmitter.scala 64:18]
      ndexR <= _ndexR_T @[intervox_transmitter.scala 64:15]
      node _T_1 = eq(ndexR, UInt<1>("h1")) @[intervox_transmitter.scala 65:20]
      when _T_1 : @[intervox_transmitter.scala 65:28]
        node _dataIndex_T = add(dataIndex, UInt<1>("h1")) @[intervox_transmitter.scala 67:34]
        node _dataIndex_T_1 = tail(_dataIndex_T, 1) @[intervox_transmitter.scala 67:34]
        dataIndex <= _dataIndex_T_1 @[intervox_transmitter.scala 67:21]
      node _T_2 = lt(bitCntr_enc, UInt<3>("h6")) @[intervox_transmitter.scala 71:26]
      when _T_2 : @[intervox_transmitter.scala 71:32]
        node _T_3 = eq(holdState, UInt<1>("h0")) @[intervox_transmitter.scala 73:26]
        when _T_3 : @[intervox_transmitter.scala 73:34]
          holdState <= UInt<1>("h1") @[intervox_transmitter.scala 74:23]
          node _outReg_T = not(outReg) @[intervox_transmitter.scala 75:23]
          outReg <= _outReg_T @[intervox_transmitter.scala 75:20]
      node _T_4 = eq(bitCntr_enc, UInt<3>("h6")) @[intervox_transmitter.scala 78:26]
      when _T_4 : @[intervox_transmitter.scala 78:34]
        node _outReg_T_1 = not(outReg) @[intervox_transmitter.scala 80:21]
        outReg <= _outReg_T_1 @[intervox_transmitter.scala 80:18]
      node _T_5 = eq(bitCntr_enc, UInt<3>("h7")) @[intervox_transmitter.scala 82:26]
      when _T_5 : @[intervox_transmitter.scala 82:34]
        node _outReg_T_2 = not(outReg) @[intervox_transmitter.scala 83:21]
        outReg <= _outReg_T_2 @[intervox_transmitter.scala 83:18]
      node _T_6 = gt(bitCntr_enc, UInt<3>("h7")) @[intervox_transmitter.scala 87:27]
      when _T_6 : @[intervox_transmitter.scala 87:34]
        holdState <= UInt<1>("h0") @[intervox_transmitter.scala 88:21]
        node _T_7 = lt(bitCntr_enc, UInt<6>("h37")) @[intervox_transmitter.scala 91:28]
        when _T_7 : @[intervox_transmitter.scala 91:35]
          node _T_8 = sub(dataIndex, UInt<2>("h3")) @[intervox_transmitter.scala 93:48]
          node _T_9 = tail(_T_8, 1) @[intervox_transmitter.scala 93:48]
          node _T_10 = sub(UInt<7>("h40"), _T_9) @[intervox_transmitter.scala 93:35]
          node _T_11 = tail(_T_10, 1) @[intervox_transmitter.scala 93:35]
          node _T_12 = dshr(stereoData, _T_11) @[intervox_transmitter.scala 93:29]
          node _T_13 = bits(_T_12, 0, 0) @[intervox_transmitter.scala 93:29]
          node _T_14 = eq(_T_13, UInt<1>("h0")) @[intervox_transmitter.scala 93:58]
          when _T_14 : @[intervox_transmitter.scala 93:67]
            hasNone <= UInt<1>("h1") @[intervox_transmitter.scala 95:23]
        node _T_15 = geq(bitCntr_enc, UInt<6>("h37")) @[intervox_transmitter.scala 98:29]
        node _T_16 = lt(bitCntr_enc, UInt<7>("h67")) @[intervox_transmitter.scala 98:53]
        node _T_17 = and(_T_15, _T_16) @[intervox_transmitter.scala 98:38]
        when _T_17 : @[intervox_transmitter.scala 98:62]
          node _T_18 = sub(dataIndex, UInt<5>("h1b")) @[intervox_transmitter.scala 100:49]
          node _T_19 = tail(_T_18, 1) @[intervox_transmitter.scala 100:49]
          node _T_20 = sub(UInt<7>("h40"), _T_19) @[intervox_transmitter.scala 100:36]
          node _T_21 = tail(_T_20, 1) @[intervox_transmitter.scala 100:36]
          node _T_22 = dshr(stereoData, _T_21) @[intervox_transmitter.scala 100:29]
          node _T_23 = bits(_T_22, 0, 0) @[intervox_transmitter.scala 100:29]
          node _T_24 = eq(_T_23, UInt<1>("h0")) @[intervox_transmitter.scala 100:61]
          when _T_24 : @[intervox_transmitter.scala 100:70]
            hasNone <= UInt<1>("h1") @[intervox_transmitter.scala 102:23]
        node _T_25 = geq(bitCntr_enc, UInt<7>("h67")) @[intervox_transmitter.scala 106:29]
        node _T_26 = lt(bitCntr_enc, UInt<7>("h7f")) @[intervox_transmitter.scala 106:54]
        node _T_27 = and(_T_25, _T_26) @[intervox_transmitter.scala 106:39]
        when _T_27 : @[intervox_transmitter.scala 106:63]
          node _T_28 = sub(dataIndex, UInt<6>("h34")) @[intervox_transmitter.scala 110:40]
          node _T_29 = tail(_T_28, 1) @[intervox_transmitter.scala 110:40]
          node _T_30 = dshr(dspData, _T_29) @[intervox_transmitter.scala 110:28]
          node _T_31 = bits(_T_30, 0, 0) @[intervox_transmitter.scala 110:28]
          node _T_32 = eq(_T_31, UInt<1>("h0")) @[intervox_transmitter.scala 110:51]
          when _T_32 : @[intervox_transmitter.scala 110:60]
            hasNone <= UInt<1>("h1") @[intervox_transmitter.scala 112:23]
        node _T_33 = geq(bitCntr_enc, UInt<7>("h7f")) @[intervox_transmitter.scala 116:29]
        node _T_34 = lt(bitCntr_enc, UInt<8>("hff")) @[intervox_transmitter.scala 116:54]
        node _T_35 = and(_T_33, _T_34) @[intervox_transmitter.scala 116:39]
        when _T_35 : @[intervox_transmitter.scala 116:63]
          node _T_36 = sub(dataIndex, UInt<7>("h40")) @[intervox_transmitter.scala 120:41]
          node _T_37 = tail(_T_36, 1) @[intervox_transmitter.scala 120:41]
          node _T_38 = dshr(dspData2, _T_37) @[intervox_transmitter.scala 120:29]
          node _T_39 = bits(_T_38, 0, 0) @[intervox_transmitter.scala 120:29]
          node _T_40 = eq(_T_39, UInt<1>("h0")) @[intervox_transmitter.scala 120:52]
          when _T_40 : @[intervox_transmitter.scala 120:61]
            hasNone <= UInt<1>("h1") @[intervox_transmitter.scala 122:23]
        node _T_41 = eq(hasNone, UInt<1>("h1")) @[intervox_transmitter.scala 126:24]
        when _T_41 : @[intervox_transmitter.scala 126:32]
          outReg <= outReg @[intervox_transmitter.scala 127:20]
          hasNone <= UInt<1>("h0") @[intervox_transmitter.scala 128:21]
        else :
          node _outReg_T_3 = not(outReg) @[intervox_transmitter.scala 132:23]
          outReg <= _outReg_T_3 @[intervox_transmitter.scala 132:20]
      node _T_42 = eq(bitCntr_enc, UInt<8>("hff")) @[intervox_transmitter.scala 136:26]
      when _T_42 : @[intervox_transmitter.scala 136:36]
        bitCntr_enc <= UInt<1>("h0") @[intervox_transmitter.scala 137:23]

  module RWSmem :
    input clock : Clock
    input reset : Reset
    output io : { flip enable : UInt<1>, flip write : UInt<1>, flip addr : UInt<1>, flip dataIn : UInt<64>, dataOut : UInt<64>}

    smem mem : UInt<64> [1] @[intervox_transmitter.scala 19:24]
    io.dataOut is invalid @[intervox_transmitter.scala 21:14]
    when io.enable : @[intervox_transmitter.scala 23:19]
      infer mport rdwrPort = mem[UInt<1>("h0")], clock @[intervox_transmitter.scala 24:23]
      when io.write : @[intervox_transmitter.scala 25:21]
        rdwrPort <= io.dataIn @[intervox_transmitter.scala 25:32]
      else :
        io.dataOut <= rdwrPort @[intervox_transmitter.scala 26:34]

  module RWSmem_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip enable : UInt<1>, flip write : UInt<1>, flip addr : UInt<1>, flip dataIn : UInt<64>, dataOut : UInt<64>}

    smem mem : UInt<64> [1] @[intervox_transmitter.scala 19:24]
    io.dataOut is invalid @[intervox_transmitter.scala 21:14]
    when io.enable : @[intervox_transmitter.scala 23:19]
      infer mport rdwrPort = mem[UInt<1>("h0")], clock @[intervox_transmitter.scala 24:23]
      when io.write : @[intervox_transmitter.scala 25:21]
        rdwrPort <= io.dataIn @[intervox_transmitter.scala 25:32]
      else :
        io.dataOut <= rdwrPort @[intervox_transmitter.scala 26:34]

  module interVox_Encoder :
    input clock : Clock
    input reset : UInt<1>
    output io : { MCLK_O : Clock, flip BCLK_IN : UInt<1>, flip LRCLK_IN : UInt<1>, flip SDATA_IN : UInt<1>, DATA_O : UInt<1>, LRCLK_O : UInt<1>, BCLK_O : UInt<1>, SDATA_O : UInt<1>, NXT_FRAME : UInt<1>}

    reg current_state : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[intervox_transmitter.scala 158:34]
    reg BiPhase_CLK_CNTR : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[intervox_transmitter.scala 160:34]
    reg DATA_OUT_REG_1B : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[intervox_transmitter.scala 162:34]
    reg FirstFrame : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[intervox_transmitter.scala 164:34]
    reg synced : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[intervox_transmitter.scala 166:34]
    reg bclkR : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[intervox_transmitter.scala 168:34]
    inst bi_phase_enc of bi_phase_encoder @[intervox_transmitter.scala 170:33]
    bi_phase_enc.clock <= clock
    bi_phase_enc.reset <= reset
    reg bitCntr : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[intervox_transmitter.scala 172:34]
    inst BFR of RWSmem @[intervox_transmitter.scala 174:33]
    BFR.clock <= clock
    BFR.reset <= reset
    inst BFR1 of RWSmem_1 @[intervox_transmitter.scala 175:33]
    BFR1.clock <= clock
    BFR1.reset <= reset
    io.DATA_O <= bi_phase_enc.io.DATA_OUT @[intervox_transmitter.scala 178:25]
    io.MCLK_O <= clock @[intervox_transmitter.scala 179:25]
    io.BCLK_O <= io.BCLK_IN @[intervox_transmitter.scala 180:25]
    io.LRCLK_O <= io.LRCLK_IN @[intervox_transmitter.scala 181:25]
    io.SDATA_O <= io.SDATA_IN @[intervox_transmitter.scala 182:25]
    BFR.io.enable <= UInt<1>("h1") @[intervox_transmitter.scala 185:25]
    BFR.io.addr <= UInt<1>("h1") @[intervox_transmitter.scala 186:25]
    BFR.io.write <= UInt<1>("h0") @[intervox_transmitter.scala 187:25]
    BFR.io.dataIn <= UInt<1>("h0") @[intervox_transmitter.scala 188:25]
    BFR1.io.enable <= UInt<1>("h1") @[intervox_transmitter.scala 189:25]
    BFR1.io.addr <= UInt<1>("h1") @[intervox_transmitter.scala 190:25]
    BFR1.io.write <= UInt<1>("h0") @[intervox_transmitter.scala 191:25]
    BFR1.io.dataIn <= BFR.io.dataOut @[intervox_transmitter.scala 192:25]
    io.NXT_FRAME <= bi_phase_enc.io.ENA @[intervox_transmitter.scala 195:31]
    bi_phase_enc.io.ENA <= UInt<1>("h0") @[intervox_transmitter.scala 198:31]
    bi_phase_enc.io.AUDIOINPUT <= BFR1.io.dataOut @[intervox_transmitter.scala 200:31]
    bi_phase_enc.io.DSPINPUT <= UInt<1>("h0") @[intervox_transmitter.scala 202:31]
    node _T = eq(synced, UInt<1>("h0")) @[intervox_transmitter.scala 219:15]
    when _T : @[intervox_transmitter.scala 219:23]
      node _BiPhase_CLK_CNTR_T = add(BiPhase_CLK_CNTR, UInt<1>("h1")) @[intervox_transmitter.scala 221:42]
      node _BiPhase_CLK_CNTR_T_1 = tail(_BiPhase_CLK_CNTR_T, 1) @[intervox_transmitter.scala 221:42]
      BiPhase_CLK_CNTR <= _BiPhase_CLK_CNTR_T_1 @[intervox_transmitter.scala 221:22]
      node _T_1 = eq(BiPhase_CLK_CNTR, UInt<2>("h3")) @[intervox_transmitter.scala 223:27]
      when _T_1 : @[intervox_transmitter.scala 223:35]
        BiPhase_CLK_CNTR <= UInt<1>("h0") @[intervox_transmitter.scala 224:24]
        node _T_2 = eq(io.LRCLK_IN, UInt<1>("h1")) @[intervox_transmitter.scala 226:24]
        when _T_2 : @[intervox_transmitter.scala 226:32]
          bitCntr <= UInt<1>("h0") @[intervox_transmitter.scala 227:17]
        node _T_3 = eq(io.LRCLK_IN, UInt<1>("h0")) @[intervox_transmitter.scala 230:24]
        when _T_3 : @[intervox_transmitter.scala 230:32]
          node _bitCntr_T = add(bitCntr, UInt<1>("h1")) @[intervox_transmitter.scala 231:28]
          node _bitCntr_T_1 = tail(_bitCntr_T, 1) @[intervox_transmitter.scala 231:28]
          bitCntr <= _bitCntr_T_1 @[intervox_transmitter.scala 231:17]
          node _T_4 = eq(bitCntr, UInt<5>("h1f")) @[intervox_transmitter.scala 233:22]
          when _T_4 : @[intervox_transmitter.scala 233:31]
            bitCntr <= UInt<1>("h0") @[intervox_transmitter.scala 234:19]
            synced <= UInt<1>("h1") @[intervox_transmitter.scala 235:18]
    node _T_5 = eq(synced, UInt<1>("h1")) @[intervox_transmitter.scala 247:15]
    when _T_5 : @[intervox_transmitter.scala 247:23]
      node _T_6 = eq(UInt<2>("h0"), current_state) @[intervox_transmitter.scala 249:26]
      when _T_6 : @[intervox_transmitter.scala 249:26]
        current_state <= UInt<2>("h2") @[intervox_transmitter.scala 253:23]
      else :
        node _T_7 = eq(UInt<2>("h1"), current_state) @[intervox_transmitter.scala 249:26]
        when _T_7 : @[intervox_transmitter.scala 249:26]
          current_state <= UInt<2>("h2") @[intervox_transmitter.scala 257:23]
        else :
          node _T_8 = eq(UInt<2>("h2"), current_state) @[intervox_transmitter.scala 249:26]
          when _T_8 : @[intervox_transmitter.scala 249:26]
            bi_phase_enc.io.ENA <= UInt<1>("h1") @[intervox_transmitter.scala 261:29]
            node _BiPhase_CLK_CNTR_T_2 = add(BiPhase_CLK_CNTR, UInt<1>("h1")) @[intervox_transmitter.scala 263:46]
            node _BiPhase_CLK_CNTR_T_3 = tail(_BiPhase_CLK_CNTR_T_2, 1) @[intervox_transmitter.scala 263:46]
            BiPhase_CLK_CNTR <= _BiPhase_CLK_CNTR_T_3 @[intervox_transmitter.scala 263:26]
            node _T_9 = eq(BiPhase_CLK_CNTR, UInt<1>("h1")) @[intervox_transmitter.scala 269:31]
            when _T_9 : @[intervox_transmitter.scala 269:39]
              BiPhase_CLK_CNTR <= UInt<1>("h0") @[intervox_transmitter.scala 270:28]
              node _bitCntr_T_2 = add(bitCntr, UInt<1>("h1")) @[intervox_transmitter.scala 273:30]
              node _bitCntr_T_3 = tail(_bitCntr_T_2, 1) @[intervox_transmitter.scala 273:30]
              bitCntr <= _bitCntr_T_3 @[intervox_transmitter.scala 273:19]
              node _T_10 = eq(bitCntr, UInt<1>("h0")) @[intervox_transmitter.scala 277:24]
              when _T_10 : @[intervox_transmitter.scala 277:32]
                BFR.io.write <= UInt<1>("h1") @[intervox_transmitter.scala 279:31]
                BFR.io.dataIn <= UInt<1>("h0") @[intervox_transmitter.scala 280:31]
              node _T_11 = gt(bitCntr, UInt<5>("h1f")) @[intervox_transmitter.scala 283:24]
              when _T_11 : @[intervox_transmitter.scala 283:31]
                BFR.io.write <= UInt<1>("h1") @[intervox_transmitter.scala 288:31]
                node _T_12 = eq(io.SDATA_IN, UInt<1>("h0")) @[intervox_transmitter.scala 290:30]
                when _T_12 : @[intervox_transmitter.scala 290:38]
                  node _BFR_io_dataIn_T = sub(UInt<7>("h48"), bitCntr) @[intervox_transmitter.scala 292:67]
                  node _BFR_io_dataIn_T_1 = tail(_BFR_io_dataIn_T, 1) @[intervox_transmitter.scala 292:67]
                  node _BFR_io_dataIn_T_2 = dshl(UInt<1>("h0"), _BFR_io_dataIn_T_1) @[intervox_transmitter.scala 292:58]
                  node _BFR_io_dataIn_T_3 = add(BFR.io.dataOut, _BFR_io_dataIn_T_2) @[intervox_transmitter.scala 292:51]
                  node _BFR_io_dataIn_T_4 = tail(_BFR_io_dataIn_T_3, 1) @[intervox_transmitter.scala 292:51]
                  BFR.io.dataIn <= _BFR_io_dataIn_T_4 @[intervox_transmitter.scala 292:33]
                node _T_13 = eq(io.SDATA_IN, UInt<1>("h1")) @[intervox_transmitter.scala 295:30]
                when _T_13 : @[intervox_transmitter.scala 295:38]
                  node _BFR_io_dataIn_T_5 = sub(UInt<7>("h48"), bitCntr) @[intervox_transmitter.scala 296:68]
                  node _BFR_io_dataIn_T_6 = tail(_BFR_io_dataIn_T_5, 1) @[intervox_transmitter.scala 296:68]
                  node _BFR_io_dataIn_T_7 = dshl(UInt<1>("h1"), _BFR_io_dataIn_T_6) @[intervox_transmitter.scala 296:58]
                  node _BFR_io_dataIn_T_8 = add(BFR.io.dataOut, _BFR_io_dataIn_T_7) @[intervox_transmitter.scala 296:51]
                  node _BFR_io_dataIn_T_9 = tail(_BFR_io_dataIn_T_8, 1) @[intervox_transmitter.scala 296:51]
                  BFR.io.dataIn <= _BFR_io_dataIn_T_9 @[intervox_transmitter.scala 296:33]
              else :
                BFR.io.write <= UInt<1>("h1") @[intervox_transmitter.scala 302:31]
                node _T_14 = eq(io.SDATA_IN, UInt<1>("h0")) @[intervox_transmitter.scala 304:30]
                when _T_14 : @[intervox_transmitter.scala 304:39]
                  node _BFR_io_dataIn_T_10 = sub(UInt<7>("h40"), bitCntr) @[intervox_transmitter.scala 306:67]
                  node _BFR_io_dataIn_T_11 = tail(_BFR_io_dataIn_T_10, 1) @[intervox_transmitter.scala 306:67]
                  node _BFR_io_dataIn_T_12 = dshl(UInt<1>("h0"), _BFR_io_dataIn_T_11) @[intervox_transmitter.scala 306:58]
                  node _BFR_io_dataIn_T_13 = add(BFR.io.dataOut, _BFR_io_dataIn_T_12) @[intervox_transmitter.scala 306:51]
                  node _BFR_io_dataIn_T_14 = tail(_BFR_io_dataIn_T_13, 1) @[intervox_transmitter.scala 306:51]
                  BFR.io.dataIn <= _BFR_io_dataIn_T_14 @[intervox_transmitter.scala 306:33]
                node _T_15 = eq(io.SDATA_IN, UInt<1>("h1")) @[intervox_transmitter.scala 309:30]
                when _T_15 : @[intervox_transmitter.scala 309:38]
                  node _BFR_io_dataIn_T_15 = sub(UInt<7>("h40"), bitCntr) @[intervox_transmitter.scala 310:67]
                  node _BFR_io_dataIn_T_16 = tail(_BFR_io_dataIn_T_15, 1) @[intervox_transmitter.scala 310:67]
                  node _BFR_io_dataIn_T_17 = dshl(UInt<1>("h1"), _BFR_io_dataIn_T_16) @[intervox_transmitter.scala 310:58]
                  node _BFR_io_dataIn_T_18 = add(BFR.io.dataOut, _BFR_io_dataIn_T_17) @[intervox_transmitter.scala 310:51]
                  node _BFR_io_dataIn_T_19 = tail(_BFR_io_dataIn_T_18, 1) @[intervox_transmitter.scala 310:51]
                  BFR.io.dataIn <= _BFR_io_dataIn_T_19 @[intervox_transmitter.scala 310:33]
              node _T_16 = eq(bitCntr, UInt<7>("h7f")) @[intervox_transmitter.scala 314:24]
              when _T_16 : @[intervox_transmitter.scala 314:34]
                BFR.io.write <= UInt<1>("h0") @[intervox_transmitter.scala 317:31]
                BFR1.io.write <= UInt<1>("h1") @[intervox_transmitter.scala 318:31]
                BFR1.io.dataIn <= BFR.io.dataOut @[intervox_transmitter.scala 319:31]
                BFR.io.write <= UInt<1>("h1") @[intervox_transmitter.scala 322:28]
                BFR.io.dataIn <= UInt<1>("h0") @[intervox_transmitter.scala 323:28]
                bitCntr <= UInt<1>("h0") @[intervox_transmitter.scala 325:21]

